#!/usr/bin/env perl

use Modern::Perl;
use Pandoc::Elements;
use Pandoc::Incremental;
use Clang::Documentation;

# Common conversion patterns for single Clang::Cursors
# with associated documentation.
package Clang::Documentation::To::Pandoc {
    use parent qw(Pandoc::Incremental);

    sub _pandocify {
        my $self = shift;
        my $cursor = shift;

        if (ref($cursor) eq 'Clang::Cursor') {
            no strict 'refs';
            my $kind = $cursor->kind;
            my $meth = "_pandocify_$kind";
            say "dispatching to $meth";
            return $self->$meth($cursor, @_);
        }
        warn "cannot pandocify @{[ ref($cursor) ]}";
        return undef;
    }

    sub _pandocify_Namespace {
        ...
    }
}

sub walk_documentables {
    my ($tu, $pandoc) = @_;

    sub _walk {
        my ($cur, $pandoc) = @_;
        return unless $cur->location->file;

        $pandoc->append(Para [ Str("$cur ("), Code(['', [], []], $cur->location), Str(")") ]);

        _walk($_ => $pandoc) for $cur->children;
    }

    $pandoc->append(Header 1, ['', [], []], [ Str "". $tu ]);
    for my $cur ($tu->cursor->children) {
        # XXX: We can't get top-level documentation for a SYNOPSIS or so.
        # Clang simply doesn't keep it around after preprocessing if it's
        # not attached to a declaration.
        #
        # TODO: _walk should stop recursing at certain kinds of symbols,
        # like function declarations. We don't care about stuff in
        # the bodies.
        say $cur->kind;
        if ("". $cur->kind eq 'comment') {
            say $cur;
        }
        else {
            _walk($cur => $pandoc);
        }
    }
    $pandoc
}

my $tu = documented_cpp(shift // die 'need source file');
my $pandoc = Clang::Documentation::To::Pandoc->new;
walk_documentables($tu => $pandoc);
print $pandoc->document->to_markdown;
